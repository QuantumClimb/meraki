// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
}

model Product {
  id              Int      @id @default(autoincrement())
  handle          String   @unique
  title           String
  description     String
  image           String
  price           Int      // Price in cents
  categoryId      Int
  subcategory     String?
  highlights      String   // JSON array of strings
  tags            String   // JSON array of strings
  brand           String
  condition       String
  inventory       Int      @default(0)
  seoTitle        String?
  seoDescription  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  category        Category @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  cartItems       CartItem[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cartItems CartItem[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  total       Int         // Total in cents
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int     // Price at time of order in cents
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
